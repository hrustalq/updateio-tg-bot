import { UseFilters, UseGuards } from '@nestjs/common';
import {
  Help,
  InjectBot,
  On,
  Message,
  Start,
  Update,
  Command,
  Ctx,
  Action,
} from 'nestjs-telegraf';
import { Telegraf, Markup } from 'telegraf';
import { TelegramBotService } from './telegram-bot.service';
import { Context } from './interfaces/context.interface';
import { TelegrafExceptionFilter } from './filters/telegraf-exception.filter';
import { TelegramAuthGuard } from './guards/telegram-auth.guard';
import { TelegramUser } from './decorators/telegram-user.decorator';
import { Message as TelegramMessage, User } from 'telegraf/types';
import { isAxiosError } from 'axios';
import { Logger } from '@nestjs/common';
import { UpdatesService } from '../updates/updates.service';

@Update()
@UseFilters(TelegrafExceptionFilter)
export class TelegramBotUpdate {
  private readonly logger = new Logger(TelegramBotUpdate.name);

  constructor(
    @InjectBot('main')
    private readonly bot: Telegraf<Context>,
    private readonly telegramBotService: TelegramBotService,
    private readonly updatesService: UpdatesService,
  ) {}

  @Start()
  async onStart(@TelegramUser() user: User): Promise<string> {
    this.logger.log(`Start command received from user ${user.id}`);
    let registrationMessage = '';
    try {
      const isRegistered = await this.telegramBotService.isUserRegistered(
        user.id.toString(),
      );
      if (!isRegistered) {
        await this.telegramBotService.registerUser(user);
        registrationMessage = '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ';
      } else {
        registrationMessage = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! ';
      }
    } catch (error) {
      if (isAxiosError(error)) {
        if (error.response?.status === 409) {
          registrationMessage = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! ';
        } else if (error.response?.status === 404) {
          await this.telegramBotService.registerUser(user);
          registrationMessage = '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ';
        }
      } else {
        console.error('Error during registration:', error);
      }
    }

    const me = await this.bot.telegram.getMe();
    return `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã ${registrationMessage}–Ø ${me.first_name} - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º –∏–≥—Ä. üéÆ

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:

üîî /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏
üîï /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã
üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
üßπ /clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
‚ùì /help - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`;
  }

  @Help()
  async onHelp(@TelegramUser() user: User): Promise<string> {
    return `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

üîî /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
   –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∞—Ç—á–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö

üîï /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã
   –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∏–≥—Ä–µ

üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –∏–≥—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã

üßπ /clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
   –£–¥–∞–ª–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø—Ä–∞—à–∏–≤–∞—Ç—å!`;
  }

  @Command('admin')
  @UseGuards(TelegramAuthGuard)
  onAdminCommand(@TelegramUser() user: User): string {
    return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${user.first_name}`;
  }

  @Command('subscribe')
  async onSubscribe(
    @TelegramUser() user: User,
    @Ctx() ctx: Context,
  ): Promise<void> {
    // –ó–∞–º–µ–Ω–∏—Ç–µ 'your_mini_app_url' –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const miniAppUrl = 'https://mini-app.updateio.dev';

    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–ø—Å–∫–∏', miniAppUrl),
    ]);

    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–≥—Ä—ã:',
      keyboard,
    );
  }

  @Command('unsubscribe')
  async onUnsubscribe(
    @TelegramUser() user: User,
    @Ctx() ctx: Context,
  ): Promise<void> {
    const miniAppUrl = 'https://mini-app.updateio.dev';

    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', miniAppUrl),
    ]);

    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—Å—è:',
      keyboard,
    );
  }

  @Command('list')
  async onList(@TelegramUser() user: User, @Ctx() ctx: Context): Promise<void> {
    const miniAppUrl = 'https://mini-app.updateio.dev';

    const keyboard = Markup.inlineKeyboard([
      Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', miniAppUrl),
    ]);

    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:',
      keyboard,
    );
  }

  @Command('clear_history')
  async onClearHistory(
    @TelegramUser() user: User,
    @Ctx() ctx: Context,
  ): Promise<void> {
    const confirmationKeyboard = Markup.inlineKeyboard([
      Markup.button.callback('–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'confirm_clear_history'),
      Markup.button.callback('–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', 'cancel_clear_history'),
    ]);

    await ctx.reply(
      `${user.first_name}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?`,
      confirmationKeyboard,
    );
  }

  @On('text')
  onMessage(
    @TelegramUser() user: User,
    @Message() message: TelegramMessage,
  ): void {
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.first_name}:`, message.chat);
  }

  @Action(/^p_/)
  async onUpdateButtonClick(@Ctx() ctx: Context) {
    if (
      'data' in ctx.callbackQuery &&
      typeof ctx.callbackQuery.data === 'string' &&
      ctx.callbackQuery.message &&
      'text' in ctx.callbackQuery.message
    ) {
      const [, updateId] = ctx.callbackQuery.data.split('_');
      const updateContext = await this.telegramBotService.getUpdateContext(updateId);

      if (!updateContext) {
        this.logger.warn(`No context found for update ${updateId}`);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      const { userId, gameId, appId } = updateContext;

      try {
        await this.updatesService.handleUpdateButtonClick(
          userId,
          gameId,
          appId,
          updateId
        );

        await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

        const originalMessage = ctx.callbackQuery.message.text;
        const updatedMessage = `${originalMessage}\n\n_–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })} (–ú–°–ö +3)_`;

        const editedMessage = await ctx.editMessageText(updatedMessage, { 
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: [] },
        });

        if (typeof editedMessage !== 'boolean' && 'message_id' in editedMessage) {
          await this.telegramBotService.updateStatus(updateId, 'PROCESSING');
          this.logger.log(`Updated status for update ${updateId} to PROCESSING`);
        } else {
          this.logger.warn(`Failed to get message_id for update ${updateId}`);
        }
      } catch (error) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        
        const errorMessage = `${ctx.callbackQuery.message.text}\n\n_–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ._`;
        await ctx.editMessageText(errorMessage, {
          parse_mode: 'Markdown',
          reply_markup: ctx.callbackQuery.message.reply_markup,
        });
      }
    } else {
      this.logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback query –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }
}
